// <auto-generated />
using System;
using HakatonBAGNET.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HakatonBAGNET.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.AnswerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("answer_id");

                    b.Property<string>("AnswerContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer_content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_moderated");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasFilter("is_deleted IS NULL");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 325, DateTimeKind.Utc).AddTicks(6389),
                            IsDeleted = false,
                            Title = "Математический анализ"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 325, DateTimeKind.Utc).AddTicks(6395),
                            IsDeleted = false,
                            Title = "Линейная алгебра"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 325, DateTimeKind.Utc).AddTicks(6396),
                            IsDeleted = false,
                            Title = "Философия"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 325, DateTimeKind.Utc).AddTicks(6398),
                            IsDeleted = false,
                            Title = "История России"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 325, DateTimeKind.Utc).AddTicks(6399),
                            IsDeleted = false,
                            Title = "Физика"
                        });
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.QuestionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("CorrectPointsCount")
                        .HasColumnType("integer")
                        .HasColumnName("correct_points_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("IncorrectPointsCount")
                        .HasColumnType("integer")
                        .HasColumnName("incorrect_points_count");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_moderated");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_content");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.ReactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid")
                        .HasColumnName("answer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_liked");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("PointsCount")
                        .HasColumnType("integer")
                        .HasColumnName("points_count");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10000,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7778),
                            FirstName = "Сережа",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Батист",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7784),
                            FirstName = "Илья",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Олейник",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7786),
                            FirstName = "Кашелот",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Кашов",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7788),
                            FirstName = "Андрей",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Чуба",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7789),
                            FirstName = "Глеб",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Сергеев",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7792),
                            FirstName = "Анастасия",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Каторга",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7793),
                            FirstName = "Алена",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "БэбиБон",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7794),
                            FirstName = "Маст",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Хэв",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7796),
                            FirstName = "Аленка",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Радушная",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7798),
                            FirstName = "Каша",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Бэбибонов",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7799),
                            FirstName = "Чупачупс",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Архангельский",
                            PointsCount = 0
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 9, 29, 6, 59, 54, 326, DateTimeKind.Utc).AddTicks(7801),
                            FirstName = "Кама",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Пуля",
                            PointsCount = 0
                        });
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.AnswerEntity", b =>
                {
                    b.HasOne("HakatonBAGNET.Domain.Entities.QuestionEntity", "Question")
                        .WithMany("Answeres")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HakatonBAGNET.Domain.Entities.UserEntity", "User")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.QuestionEntity", b =>
                {
                    b.HasOne("HakatonBAGNET.Domain.Entities.CategoryEntity", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HakatonBAGNET.Domain.Entities.UserEntity", "User")
                        .WithMany("CreatedQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.ReactionEntity", b =>
                {
                    b.HasOne("HakatonBAGNET.Domain.Entities.AnswerEntity", "Answer")
                        .WithMany("Reactions")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HakatonBAGNET.Domain.Entities.QuestionEntity", "Question")
                        .WithMany("Reactions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HakatonBAGNET.Domain.Entities.UserEntity", "User")
                        .WithMany("CreatedReactionsByUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.AnswerEntity", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.QuestionEntity", b =>
                {
                    b.Navigation("Answeres");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("HakatonBAGNET.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("AnsweredQuestions");

                    b.Navigation("CreatedQuestions");

                    b.Navigation("CreatedReactionsByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
